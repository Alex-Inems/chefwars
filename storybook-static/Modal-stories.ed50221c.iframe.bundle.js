"use strict";(self.webpackChunknewapp=self.webpackChunknewapp||[]).push([[258],{"./components/Modal.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Closed:()=>Closed,CustomContent:()=>CustomContent,Default:()=>Default,Interactive:()=>Interactive,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Modal_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const Modal=({isOpen,onClose,children})=>isOpen?(0,jsx_runtime.jsx)("div",{className:"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50",children:(0,jsx_runtime.jsxs)("div",{className:"bg-white p-6 rounded-lg shadow-lg w-full max-w-lg relative",children:[(0,jsx_runtime.jsx)("button",{onClick:onClose,className:"absolute top-2 right-2 text-gray-600",children:"âœ• "}),children]})}):null,components_Modal=Modal;Modal.__docgenInfo={description:"",methods:[],displayName:"Modal",props:{isOpen:{required:!0,tsType:{name:"boolean"},description:""},onClose:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},children:{required:!0,tsType:{name:"ReactNode"},description:""}}};const Modal_stories={title:"Components/Modal",component:components_Modal,parameters:{backgrounds:{default:"light",values:[{name:"light",value:"#ffffff"},{name:"dark",value:"#000000"}]},tags:["autodocs"]},argTypes:{isOpen:{control:{type:"boolean"},description:"Controls whether the modal is visible."},onClose:{action:"onClose",description:"Callback triggered when the modal is closed."},children:{control:{type:"text"},description:"Content inside the modal."}}},Template=args=>(0,jsx_runtime.jsx)(components_Modal,{...args}),Default=Template.bind({});Default.args={isOpen:!0,children:(0,jsx_runtime.jsx)("p",{children:"This is a modal!"})};const Interactive=()=>{const[isOpen,setIsOpen]=(0,react.useState)(!1);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setIsOpen(!0),className:"bg-blue-500 text-white px-4 py-2 rounded-lg",children:"Open Modal"}),(0,jsx_runtime.jsxs)(components_Modal,{isOpen,onClose:()=>setIsOpen(!1),children:[(0,jsx_runtime.jsx)("h2",{className:"text-lg font-bold",children:"Interactive Modal"}),(0,jsx_runtime.jsx)("p",{children:"This modal can be toggled open and closed."}),(0,jsx_runtime.jsx)("button",{onClick:()=>setIsOpen(!1),className:"mt-4 bg-red-500 text-white px-4 py-2 rounded-lg",children:"Close Modal"})]})]})},CustomContent=Template.bind({});CustomContent.args={isOpen:!0,children:(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h2",{className:"text-lg font-bold",children:"Custom Content"}),(0,jsx_runtime.jsx)("p",{children:"You can place any custom content inside the modal."})]})};const Closed=Template.bind({});Closed.args={isOpen:!1};const __namedExportsOrder=["Default","Interactive","CustomContent","Closed"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <Modal {...args} />",...Default.parameters?.docs?.source}}},Interactive.parameters={...Interactive.parameters,docs:{...Interactive.parameters?.docs,source:{originalSource:'() => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <div>\r\n      <button onClick={() => setIsOpen(true)} className="bg-blue-500 text-white px-4 py-2 rounded-lg">\r\n        Open Modal\r\n      </button>\r\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n        <h2 className="text-lg font-bold">Interactive Modal</h2>\r\n        <p>This modal can be toggled open and closed.</p>\r\n        <button onClick={() => setIsOpen(false)} className="mt-4 bg-red-500 text-white px-4 py-2 rounded-lg">\r\n          Close Modal\r\n        </button>\r\n      </Modal>\r\n    </div>;\n}',...Interactive.parameters?.docs?.source}}},CustomContent.parameters={...CustomContent.parameters,docs:{...CustomContent.parameters?.docs,source:{originalSource:"args => <Modal {...args} />",...CustomContent.parameters?.docs?.source}}},Closed.parameters={...Closed.parameters,docs:{...Closed.parameters?.docs,source:{originalSource:"args => <Modal {...args} />",...Closed.parameters?.docs?.source}}}}}]);